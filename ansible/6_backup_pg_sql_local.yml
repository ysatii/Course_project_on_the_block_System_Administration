---
- name: Бэкапирование базы данных 
  hosts: zabbix_server 
  gather_facts: no
  vars:
    backup_file: "/tmp/{{backup_f}}"
  tasks:
    - name: Проверяем, существует ли файл на удаленном сервере
      ansible.builtin.stat:
        path: "{{ backup_file }}"
      register: file_stat
      become: yes

    - name: Удаляем файл, если он существует
      ansible.builtin.file:
        path: "{{ backup_file }}"
        state: absent
      become: yes
      when: file_stat.stat.exists
    
    - name: Создаем дамп базы данных
      command: >
        pg_dump -h {{ db_host_local }} -p {{ db_port_local }} -U {{ db_user_local }} -F c -b -v -f "{{ backup_file }}" "{{ db_name_local}}"
      environment:
        PGPASSWORD: "{{ db_password_local }}"   
      register: dump_result

    - name: Проверяем создан ли бэкап
      debug:
        msg: "Дамп успешно создан: {{ backup_file }}"
      when: dump_result.rc == 0

    - name: Ошибка создания бэкапа
      debug:
        msg: "Ошибка создания базы данных {{ db_name_local }}"
      when: dump_result.rc != 0

    - name: Получаем файл дамп базы данных с удаленного сервера
      ansible.builtin.fetch:
        src: "{{ backup_file }}"
        dest: templates2/
      become: yes

      
- name: Бэкапирование базы данных 
  hosts: zabbix_server 
  become_user: root
  gather_facts: no
  tasks:
    - name: Указываем путь к файлу на удаленном сервере
      set_fact:
        backup_file: "/tmp/{{backup_f}}"

    - name: Проверяем, существует ли файл дампа на удаленном сервере
      ansible.builtin.stat:
        path: "{{ backup_file }}"
      register: backup_stat
      become: yes


    - name: проверяем переменную backup_stat
      debug:
        var: backup_stat
   
    - name: Проверяем значение переменной backup_file перед fetch
      debug:
        msg: "Путь к файлу: {{ backup_file }}"
    

    - name: Получаем файл дампа базы данных с удаленного сервера
      ansible.builtin.fetch:
        src: "/tmp/zabbix.backup" 
        dest: "templates2/"
        flat: yes
      become: no  # Поскольку fetch выполняется на локальном сервере, права не нужны
    #  when: backup_stat.stat.exists
      delegate_to: localhost

    - name: Выводим сообщение о том, куда скопирован файл
      debug:
        msg: "Файл был скопирован в директорию: templates2/, исходное имя файла: {{ backup_file | basename }}"
      when: backup_stat.stat.exists is defined and backup_stat.stat.exists
