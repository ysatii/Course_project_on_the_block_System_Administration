---
- name: Подготовка к востановлению дазы данных pgsql
  hosts: zabbix_server 
  gather_facts: no
  vars:
    state: present
  tasks:
        
  - name: Устанавливаем пакеты необходимые для чистки таблиц 
    ansible.builtin.debug:
        msg: "Устанавливаем скрипты необходимы для чистки таблиц"
  
  - name: Установливаем python3-pip для последующей установки пакетов
    apt:
        name: python3-pip
        state: present
    become: yes
 
  - name: Установливаем зависимости psycopg2  
    apt:
      name: python3-psycopg2
      state: present
    become: yes

  - name: Устанавливаем psycopg2 с помощью pip
    pip:
      name:
        - psycopg2
        - psycopg2-binary
      state: present
    become: yes

- name: Очищаем базу данных и подымаем дамп
  hosts: zabbix_server
  gather_facts: no
  become_user: postgress
  vars:
    state: present

  tasks:
  - name: Удаление внешних ключей с таблиц
    become_user: "{{db_user_local}}"
    command: >
        psql -h {{ db_host_local }} -U {{ db_user_local }} -d {{ db_name_local}} -c "{{ item }}"
    with_items: "{{ fk_constraints }}"
    environment:
      PGPASSWORD: "{{ db_password_local }}"
    ignore_errors: yes  # Игнорируем ошибки, если ключ уже не существует

  - name: Получаем список всех таблиц 
    postgresql_query:
        db: "{{ db_name_local }}"
        login_user: "{{ db_user_local }}"
        login_password: "{{ db_password_local }}"
        login_host: "{{db_host_local}}"
        login_port: "{{ db_port_local }}"
        query: "SELECT tablename FROM pg_tables WHERE schemaname = 'public';"
    register: tables

  - name: Удаляем все таблицы
    postgresql_query:
        db: "{{ db_name_local }}"
        login_user: "{{ db_user_local }}"
        login_password: "{{ db_password_local }}"
        login_host: "{{db_host_local}}"
        login_port: "{{ db_port_local }}"
        query: "DROP TABLE {{ item }} CASCADE;"
    loop: "{{ tables.query_result | map(attribute='tablename') | list }}"
    when: tables.query_result | length > 0

  - name: Пересоздаем базу данных
    postgresql_db:
        db: "{{ db_name_local }}"
        login_user: "{{ db_user_local }}"
        login_password: "{{ db_password_local }}"
        login_host: "{{db_host_local}}"
        login_port: "{{ db_port_local }}"


  - name: Копирование файла zabbix.backup с дампом pgsql 
    copy:
      src: "{{restore_file}}"
      dest: /tmp/

  # дополнительные опции --clean --if-exists они удалят востанавливаемые объекты
  - name: Restore PostgreSQL database from dump
    command: >
        pg_restore -h "{{ db_host_local }}" --clean --if-exists -U "{{ db_user_local }}" -d "{{ db_name_local }}" -v /tmp/zabbix.backup
    environment:
        PGPASSWORD: "{{ db_password_local }}"
    register: restore_result
  # если нужжен результат востановления базы данных раскоментируйте строки ниже
  #- name: Печатаем результат востановления данных
  #  debug:
  ##   var: restore_result	